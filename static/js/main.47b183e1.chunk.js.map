{"version":3,"sources":["Flips.js","App.js","serviceWorker.js","index.js"],"names":["Flips","d","h","hd","days","hours","mins","secs","getMonth","getDate","className","toUpperCase","ret","tDigs","r","toString","i","length","formatCount","play","width","height","numbers","nonNumberStyle","fontSize","App","goldenArray","useState","Date","date","setDate","holidays","holiday","findHolidayYear","today","g","getFullYear","pm","setYear","getDay","e","easter","findEaster","hMonth","hDay","useEffect","interval","setInterval","clearInterval","map","v","key","id","Object","keys","Math","floor","minutes","seconds","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47b183e1.chunk.js","sourcesContent":["import FlipNumbers from 'react-flip-numbers';\nimport React from 'react';\n\nfunction Flips({d, h, hd, days, hours, mins, secs}){\n    if(d.getMonth() === hd.getMonth() && d.getDate() === hd.getDate()){\n        return <div className='celebrate'>{'IT\\'S '+h.toUpperCase()+'!'}</div>\n    }\n    let ret = ['','','','']\n    let tDigs = [hours, mins, secs]\n    let r = formatCount()\n\n    function formatCount(){\n        if (days < 100 && days >= 10){\n            ret[0] = '0'+days.toString()\n        } else if (days < 10){\n            ret[0] = '00'+days.toString()\n        } else {\n            ret[0] = days.toString()\n        }\n        for (let i = 0; i < tDigs.length; i++){\n            if (tDigs[i] < 10){\n                ret[i+1] = '0' + tDigs[i].toString()\n            } else {\n                ret[i+1] = tDigs[i].toString()\n            }\n        }\n        return ret[0]+':'+ret[1]+':'+ret[2]+':'+ret[3]\n    }\n\n    return (\n        <div className='clock'>\n            <span className='time-tag-one'>Days</span>\n            <span className='time-tag-two'>Hours</span>\n            <span className='time-tag-three'>Mins</span>\n            <span className='time-tag-four'> Secs</span>\n            <div className='numbers'>\n                <FlipNumbers play\n                             width          = {50} \n                             height         = {50} \n                             numbers        = {r}\n                             nonNumberStyle = {{fontSize: '50px'}}/>\n            </div> \n        </div>\n    )\n}\n\nexport default Flips;","import React, { useEffect, useState } from 'react';\nimport Flips from './Flips';\nimport './App.css';\n\nfunction App() {\n  const seconds     = 1000 \n  const minutes     = seconds * 60 \n  const hours       = minutes * 60 \n  const days        = hours * 24 \n  const goldenArray = [[],[3,14],[3,3],[2,23],[3,11],\n                       [2,31],[3,18],[3,8],[2,28],[3,16],\n                       [3,5],[2,25],[3,13],[3,2],[2,22],\n                       [3,10],[2,30],[3,17],[3,7],[2,27]]\n  \n  const [date, setDate] = useState(new Date())\n  const halloween       = findHolidayYear(date, 9, 31)\n  const christmas       = findHolidayYear(date, 11, 25)\n  const valentines      = findHolidayYear(date, 1, 14)\n  const easter          = findEaster(date)\n  let holidays          = [{holiday: 'Halloween', date: halloween},\n                           {holiday:'Christmas', date: christmas}, \n                           {holiday:'Valentines', date: valentines}, \n                           {holiday:'Easter', date: easter}]\n\n  useEffect(()=>{\n    const interval = setInterval(()=>{\n      setDate((d) => new Date())\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [])\n\n  function findEaster(today){\n    let g = goldenArray[(today.getFullYear()%19) + 1]\n    let pm = findHolidayYear(today, g[0], g[1])\n    if (pm.getFullYear() > today.getFullYear()){\n      pm.setYear(pm.getFullYear()-1)\n    }\n    pm.setDate(pm.getDate() + (7 - pm.getDay()))\n    let e = findHolidayYear(today, pm.getMonth(), pm.getDate())\n    if (e.getFullYear() > today.getFullYear()){\n      let g = goldenArray[(e.getFullYear()%19) + 1]\n      let easter = new Date(e.getFullYear(), g[0], g[1])\n      easter.setDate(easter.getDate() + (7 - easter.getDay()))\n      return easter\n    }\n    return e\n  }\n\n  function findHolidayYear(today, hMonth, hDay ){\n    if ((today.getMonth() === hMonth) && (today.getDate() === hDay)){\n      return new Date(today.getFullYear(), today.getMonth(), today.getDate())\n    } \n    if ((today.getMonth() < hMonth) || ((today.getMonth() === hMonth) && (today.getDate() < hDay))){\n        return new Date(today.getFullYear(), hMonth, hDay)\n    }\n    return new Date((today.getFullYear()+1), hMonth, hDay)\n  }\n\n  return (\n    <div className=\"App\">\n        {holidays.map((v, i)=>{\n          return(\n                <div className='container' key={i} id={v[Object.keys(v)[0]]} >\n                <span className='holiday-name'>{v[Object.keys(v)[0]]}</span>\n                <Flips d={date}\n                       h={v[Object.keys(v)[0]]}\n                       hd={v[Object.keys(v)[1]]}\n                       days={Math.floor((v[Object.keys(v)[1]]-date)/days)}\n                       hours={Math.floor((v[Object.keys(v)[1]]-date)/hours  ) % 24} \n                       mins={Math.floor((v[Object.keys(v)[1]]-date)/minutes) % 60} \n                       secs={Math.floor((v[Object.keys(v)[1]]-date)/seconds) % 60} />\n                </div>\n          )\n        })}\n        <span className='date'>Today: { date.toString() }</span>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}